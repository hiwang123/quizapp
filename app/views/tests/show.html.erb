<div class='container'>
  <h2 class="test-title"><%= @test.title %></h2>
  <div class="panel with-nav-tabs panel-default">
	<div class="panel-heading">
	  <ul class="nav nav-tabs">
		<li>
		  <a href='#1a' data-toggle='tab'>測驗</a>
		</li>
		<li class='active'>
		  <a href='#2a' data-toggle='tab'>分析</a>
		</li>
		<li>
		  <a href='#3a' data-toggle='tab'>瀏覽</a>
		</li>
	  </ul>
	</div>

	<div class='panel-body'>
	 <div class='tab-content'>
	  <div class='tab-pane fade' id='1a'>
		<div id='show0'>
		  <h4>作答類型</h4>
		  <div class="btn-group" role="group">
			  <button type="button" class="btn btn-success xyz" id='yee'>所有試題</button>
			  <button type="button" class="btn btn-danger xyz" id='wrong'>上次錯誤</button>
			  <button type="button" class="btn btn-warning xyz" id='tag'>星號標記</button>
		  </div>		  
		</div>
		<div id='show1'>
		  <span class='star'>&#x2605;</span>
		  <h4>試題</h4>
		  <pre id='prob'></pre> 
		  <img id='img1'>
		  <h4>作答</h4>
		  <div id='fill'>
			  <input type='text'>
		  </div>
		  <div id='choice'>
			<label class="checkbox-inline"><input type='checkbox' value='a'>A</label>
			<label class="checkbox-inline"><input type='checkbox' value='b'>B</label>
			<label class="checkbox-inline"><input type='checkbox' value='c'>C</label>
			<label class="checkbox-inline"><input type='checkbox' value='d'>D</label>
			<label class="checkbox-inline"><input type='checkbox' value='e'>E</label>
		  </div>
		  <div><button id='control' class="btn btn-primary"></button></div>
		</div>
		<div id='show2'>
		  <h4>結果</h4> 
		  <pre id='result'></pre>
		  <h4>答案</h4>
		  <pre id='ans'></pre>
		  <h4>詳解</h4>
		  <pre id='explain'></pre>
		  <img id='img2'>
		</div>
	  </div>

	  <div class='tab-pane fade in active' id='2a'>
		<h4>總成績</h4>
		<div id='lgraph'></div>
		<h4>類型正確率</h4>
		<div id='rgraph'></div>
	  </div>
  
	  <div class='tab-pane fade' id='3a'>
		<table class='table'>
		  <% @questions.each do |q| %>
		   <tr><td>
			<h4>試題</h4>
			<pre><%= q.prob%></pre>
			<%=image_tag q.attachment1%>
			<h4>答案</h4>
			<pre><%= q.ans%></pre>
		   </td></tr>
		  <% end %>
		</table>
	  </div>
	 </div>
	</div>
  </div>
</div>
<script>
$(document).ready(function(){
	//var arr = "<%# Base64.strict_encode64(@questions.to_json(:except => [:created_at, :updated_at])) %>";
	var arr = <%= raw @questions.to_json(:except => [:created_at, :updated_at]) %>;
	//arr = JSON.parse(decodeURIComponent(atob(arr)));
	var star = qid2arr(<%= raw @tags.to_json(:except => [:id]) %>);
	var select;
	var record = [];
	var now = 0;
	var proper = false;
	var flag=true;
	prepare();
	$('#control').click(function(){
		if(!proper) return false;
		if(now == arr.length){
			 send_form();
			 return true;
		}
		if(flag){
			show_ans(now, correct(arr[now].typ, arr[now].ans));
			now++;
		}else{
			show_prob(now);
		}
		flag=!flag;
	});
	function prepare(){
		$('#show1').hide();
		$('#show2').hide();
		$('.xyz').click(function(){
			var arr2 = [];
			if(this.id == 'wrong' || this.id == 'tag'){
				select = this.id == 'wrong' ? qid2arr(<%= raw @wrongs.to_json(:except => [:id]) %>) :
						qid2arr(<%= raw @tags.to_json(:except => [:id]) %>);
				for(var i in arr)
                    if(select.indexOf(arr[i]['id']) >= 0) arr2.push(arr[i]);
				if(arr2.length == 0){
					alert('此項目為空，請選擇其他');
					return false;
				}
				arr = arr2.slice();
			}else{
				if(arr.length == 0){
					alert('此項目為空，請選擇其他');
                    return false;
				}
			}
			$('#show0').remove();
			$('#show1').show();
			proper = true;
			show_prob(now);
		});
	}
	function correct(type, ans){
		var checked = [];
		$('input:checkbox:checked').each(function(){ checked.push(this.value); });
		switch(type){
			case 1:
				ans = ans.toLowerCase().replace(' ','').split('');
				for(var i in checked)
					if(ans.indexOf(checked[i]) < 0) return false;
				for(var i in checked)
					if(ans.indexOf(checked[i]) > -1) return true;
				return false;
				break;
			case 2:
				ans = ans.toLowerCase().replace(' ','').split('');
				console.log(checked);
				console.log(ans);
				for(var i in checked)
                    if(ans.indexOf(checked[i]) < 0) return false;
				for(var i in ans)
					if(checked.indexOf(ans[i]) < 0) return false;
				return true;
				break;
			case 3:
				return $('input:text').val() == ans;
				break;
			default:
				return false;
				break;
		}
	}
	function show_ans(now,result){
		$('#show2').show();
		$('#ans').text(arr[now].ans);
		$('#explain').text(arr[now].explain);
		$('#img2').attr('src',arr[now].attachment2.url);
		$('#result').text(result ? 'Correct':'False');
		$('#control').text("Next");
		$('input:checkbox').attr('onClick','return false');
		record.push({'qid':arr[now].id, 'correct':result});
	}
	function show_prob(now){
		$('#show2').hide();
		if(star.indexOf(arr[now]['id']) < 0) $('.star').removeClass('selected');
        else $('.star').addClass('selected');
		$('input:checkbox').removeAttr('checked onClick');
		$('#explain').text('');
		$('#result').text('');
		$('#prob').text(arr[now].prob);
		$('#img1').attr('src',arr[now].attachment1.url);
		if(arr[now].typ==3){
			$('#fill').show();
			$('#choice').hide();
		}else{
			$('#fill').hide();
			$('#choice').show();
		}
		$('#control').text("Submit");
	}
	function send_form(){
		$.post({
			url: '/test/record',
			type: 'POST',
			data: { data: JSON.stringify(record),
					id: <%= @test.id %> },
			success: function(r){window.location.reload(true);}
		});
	}
	function qid2arr(obj){
		var ret=[];
		for(var i in obj)
			ret.push(obj[i]['qid']);
		return ret;
	}
	$('.star').click(function(){
		var result = {};
		result['qid'] = arr[now]['id'];
		if($(this).hasClass('selected')){
			$(this).removeClass('selected');
			result['tag'] = false;
		}else{
			$(this).addClass('selected');
			result['tag'] = true;
		}
		$.post({
                url: '/test/tag',
                type: 'POST',
                data: { data: JSON.stringify(result)},
                success: function(){}
        });
		alert(result['tag'] ? '新增星號' : '移除星號');
	});
});
</script>
<script>
	var data = <%= raw @scores.to_json(:only => [:grade]) %>;
	data = name2arr(data, 'grade');
	var margin = {top: 20, right: 100, bottom: 50, left: 50};
	var width = 500 - margin.left - margin.right;
	var height = 300 - margin.top - margin.bottom;

	var x = d3.scale.linear().domain([-1, data.length-1]).range([0, width]);
	var y = d3.scale.linear().domain([0, 100]).range([height, 0]);
	var xAxis = d3.svg.axis().scale(x).ticks(data.length).orient("bottom");
	var yAxis = d3.svg.axis().scale(y).tickValues([0,25,50,75,100]).orient("left");
	var line = d3.svg.line().x(function(d,i){ return x(i); })
							.y(function(d){ return y(d); });
	function xx(d,i) { return x(i); };
	function yy(d) { return y(d); };
	var graph = d3.select("#lgraph").append("svg:svg")
			      .attr("width", width + margin.left + margin.right)
			      .attr("height", height + margin.top + margin.bottom)
				  .append("svg:g")
			      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
	graph.append("svg:g")
			      .attr("class", "y axis")
			      .attr("transform", "translate(0,0)")
			      .call(yAxis);
	graph.append("svg:g")
			      .attr("class", "x axis")
			      .attr("transform", "translate(0," + height +")")
			      .call(xAxis);
	graph.selectAll("circle").data(data)
				  .enter().append("circle")
				  .attr("cx", xx)
				  .attr("cy", yy);
	graph.append("svg:path").attr("d", line(data));
	function name2arr(obj, name){
		var ret = [];
		for(var i in obj)
			ret.push(Math.floor(obj[i][name]*100));
		return ret;	
	}
</script>

<script>
var colorscale = d3.scale.category10();
var legendOptions = ['total','latest'];
var json = <%= raw @statics.to_json() %>;
var stat=[];
stat[0] = parsejson(json[0], json[1]);
stat[1] = parsejson(json[2], json[3]);

function parsejson(data1, data2){
	var ret = [];
	for(var x in data1){
		ret.push({'axis': x, 'value': (data2.hasOwnProperty(x) ? data2[x]:0)/data1[x]});
	}
	return ret;
}

function drawRadarCharts() {
	if(stat[0].length == 0 && stat[1].length == 0) return ;
    drawRadarChart('#rgraph', 250, 250);
};

function drawRadarChart(divId, w, h) {
    var textSizeLevels = "10px !important";
    var textSizeTooltip = "13px !important";
    var textSizeLegend = "11px !important";
    var circleSize = 5;
    var strokeWidthPolygon = "2px";
    
    var RadarChart = {
        draw: function(id, data, options) {
            var cfg = {
                radius: circleSize,
                w: w,
                h: h,
                factor: 1,
                factorLegend: .85,
                levels: 3,
                maxValue: 0,
                radians: 2 * Math.PI,
                opacityArea: 0.001,
                ToRight: 5,
                TranslateX: 80,
                TranslateY: 30,
                ExtraWidthX: 10,
                ExtraWidthY: 100,
                color: d3.scale.category10()
            };
            
            if ('undefined' !== typeof options) {
                for (var i in options) {
                    if ('undefined' !== typeof options[i]) {
                        cfg[i] = options[i];
                    }
                }
            }
            
            cfg.maxValue = Math.max(cfg.maxValue, d3.max(data, function(i){return d3.max(i.map(function(o){return o.value;}));}));
            var allAxis = (data[0].map(function(i, j){return i.axis;}));
            var total = allAxis.length;
            var radius = cfg.factor*Math.min(cfg.w/2, cfg.h/2);
            d3.select(id)
                .select("svg").remove();
            
            var g = d3.select(id)
                .append("svg")
                .attr("width", cfg.w+cfg.ExtraWidthX)
                .attr("height", cfg.h+cfg.ExtraWidthY)
                .attr("class", "graph-svg-component")
                .append("g")
                .attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");
            
            var tooltip;
            
            // Circular segments
            for (var j=0; j<cfg.levels-1; j++) {
                var levelFactor = cfg.factor*radius*((j+1)/cfg.levels);
                g.selectAll(".levels")
                .data(allAxis)
                .enter()
                .append("svg:line")
                .attr("x1", function(d, i){return levelFactor*(1-cfg.factor*Math.sin(i*cfg.radians/total));})
                .attr("y1", function(d, i){return levelFactor*(1-cfg.factor*Math.cos(i*cfg.radians/total));})
                .attr("x2", function(d, i){return levelFactor*(1-cfg.factor*Math.sin((i+1)*cfg.radians/total));})
                .attr("y2", function(d, i){return levelFactor*(1-cfg.factor*Math.cos((i+1)*cfg.radians/total));})
                .attr("class", "line")
                
                .style("stroke", "grey")
                .style("stroke-opacity", "0.75")
                .style("stroke-width", "0.3px")
                .attr("transform", "translate(" + (cfg.w/2-levelFactor) + ", " + (cfg.h/2-levelFactor) + ")");
            }
            
            // Text indicating at what % each level is
            for (var j=0; j<cfg.levels; j++) {
                var levelFactor = cfg.factor*radius*((j+1)/cfg.levels);
                g.selectAll(".levels")
                .data([1]) //dummy data
                .enter()
                .append("svg:text")
                .attr("x", function(d){return levelFactor*(1-cfg.factor*Math.sin(0));})
                .attr("y", function(d){return levelFactor*(1-cfg.factor*Math.cos(0));})
                .attr("class", "legend")
                .style("font-family", "sans-serif")
                .style("font-size", textSizeLevels)
                .attr("transform", "translate(" + (cfg.w/2-levelFactor + cfg.ToRight) + ", " + (cfg.h/2-levelFactor) + ")")
                .attr("fill", "#737373")
                .text((j+1)*cfg.maxValue/cfg.levels);
            }
            
            series = 0;
            
            var axis = g.selectAll(".axis")
            .data(allAxis)
            .enter()
            .append("g")
            .attr("class", axis);
            
            axis.append("line")
            .attr("x1", cfg.w/2)
            .attr("y1", cfg.h/2)
            .attr("x2", function(d, i){return cfg.w/2*(1-cfg.factor*Math.sin(i*cfg.radians/total));})
            .attr("y2", function(d, i){return cfg.h/2*(1-cfg.factor*Math.cos(i*cfg.radians/total));})
            .attr("class", "line")
            .style("stroke", "grey")
            .style("stroke-width", "1px");
            
            axis.append("text")
            .attr("class", "legend")
            .text(function(d){return d;})
            .style("font-family", "sans-serif")
            .style("font-size", textSizeLegend)
            .attr("text-anchor", "middle")
            .attr("dy", "1.5em")
            .attr("transform", function(d, i){return "translate(0, -10)";})
            .attr("x", function(d, i){return cfg.w/2*(1-cfg.factorLegend*Math.sin(i*cfg.radians/total))-60*Math.sin(i*cfg.radians/total);})
            .attr("y", function(d, i){return cfg.h/2*(1-Math.cos(i*cfg.radians/total))-20*Math.cos(i*cfg.radians/total);});
            
            data.forEach(function(y, x) {
                dataValues = [];
                g.selectAll(".nodes")
                .data(y, function(j, i) {
                    dataValues.push([
                        cfg.w/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total)), 
                        cfg.h/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total))
                    ]);
                });
                dataValues.push(dataValues[0]);
                g.selectAll(".area")
                .data([dataValues])
                .enter()
                .append("polygon")
                .attr("class", "radar-chart-series_"+series)
                .style("stroke-width", strokeWidthPolygon)
                .style("stroke", cfg.color(series))
                .attr("points",function(d) {
                    var str="";
                    for (var pti=0;pti<d.length;pti++) {
                        str=str+d[pti][0]+","+d[pti][1]+" ";
                    }
                    return str;
                })
                .style("fill", function(j, i) {
                    return cfg.color(series);
                })
                .style("fill-opacity", cfg.opacityArea)
                .on('mouseover', function (d) {
                    z = "polygon."+d3.select(this).attr("class");
                    g.selectAll("polygon")
                    .transition(200)
                    .style("fill-opacity", 0.1);
                    g.selectAll(z)
                    .transition(200)
                    .style("fill-opacity", 0.7);
                })
                .on('mouseout', function() {
                    g.selectAll("polygon")
                    .transition(200)
                    .style("fill-opacity", cfg.opacityArea);
                });
                
                series++;
            });
            
            series=0;
            
            data.forEach(function(y, x) {
                g.selectAll(".nodes")
                .data(y).enter()
                .append("svg:circle")
                .attr("class", "radar-chart-series_"+series)
                .attr('r', cfg.radius)
                .attr("alt", function(j){return Math.max(j.value, 0);})
                .attr("cx", function(j, i){
                    dataValues.push([
                        cfg.w/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total)), 
                        cfg.h/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total))
                    ]);
                    return cfg.w/2*(1-(Math.max(j.value, 0)/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total));
                })
                .attr("cy", function(j, i){
                    return cfg.h/2*(1-(Math.max(j.value, 0)/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total));
                })
                .attr("data-id", function(j){
                    return j.axis;
                })
                .style("fill", cfg.color(series)).style("fill-opacity", .9)
                .on('mouseover', function (d){
                    newX =  parseFloat(d3.select(this).attr('cx')) - 10;
                    newY =  parseFloat(d3.select(this).attr('cy')) - 5;
                    
                    tooltip.attr('x', newX)
                    .attr('y', newY)
                    .text(d.value)
                    .transition(200)
                    .style('opacity', 1);
                    
                    z = "polygon." + d3.select(this).attr("class");
                    g.selectAll("polygon")
                    .transition(200)
                    .style("fill-opacity", 0.1); 
                    g.selectAll(z)
                    .transition(200)
                    .style("fill-opacity", 0.7);
                })
                .on('mouseout', function(){
                    tooltip.transition(200)
                    .style('opacity', 0);
                    g.selectAll("polygon")
                    .transition(200)
                    .style("fill-opacity", cfg.opacityArea);
                })
                .append("svg:title")
                .text(function(j){
                    return Math.max(j.value, 0);
                });
                
                series++;
            });
            
            //Tooltip
            tooltip = g.append('text')
            .style('opacity', 0)
            .style('font-family', 'sans-serif')
            .style('font-size', textSizeTooltip);
        }
    };
    
    // Options for the Radar chart, other than default
    var myOptions = {
        w: w
        ,h: h
        ,ExtraWidthX: 180
        ,labelScale: 0.7
        ,levels: 5
        ,levelScale: 0.85
        ,facetPaddingScale: 1.9
        ,maxValue: 0.6
        ,showAxes: true
        ,showAxesLabels: true
        ,showLegend: true
        ,showLevels: true
        ,showLevelsLabels: false
        ,showPolygons: true
        ,showVertices: true
    };
    
    RadarChart.draw(divId, stat, myOptions);
    
    ////////////////////////////////////////////
    /////////// Initiate legend ////////////////
    ////////////////////////////////////////////
    
    var svg = d3.select(divId)
    .selectAll('svg')
    .append('svg')
    .attr("width", w+300)
    .attr("height", h)
    .style("font-size", textSizeLegend);
    
    // Initiate Legend
    var legend = svg.append("g")
    .attr("class", "legend")
    .attr("height", 100)
    .attr("width", 200)
    .attr('transform', 'translate(90,20)');
    
    // Create colour squares
    legend.selectAll('rect')
    .data(legendOptions)
    .enter()
    .append("rect")
    .attr("x", w - 8)
    .attr("y", function(d, i) {
        return i * 20;
    })
    .attr("width", 10)
    .attr("height", 10)
    .style("fill", function(d, i) {
        return colorscale(i);
    });
    
    // Create text next to squares
    legend.selectAll('text')
    .data(legendOptions)
    .enter()
    .append("text")
    .attr("x", w + 3)
    .attr("y", function(d, i) {
        return i * 20 + 9;
    })
    .attr("font-size", textSizeLegend)
    .attr("fill", "#737373")
    .text(function(d) {
        return d;
    });
};


drawRadarCharts();

</script>
